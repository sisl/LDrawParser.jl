var documenterSearchIndex = {"docs":
[{"location":"#LDrawParser","page":"LDrawParser","title":"LDrawParser","text":"","category":"section"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"A package for parsing LDraw™ files. As stated on the LDraw website, LDraw is an open standard for LEGO CAD programs that enables the creation of virtual LEGO models. This package allows you to parse LDraw™ files into a Julia data structure. ","category":"page"},{"location":"#Manual-Outline","page":"LDrawParser","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"","category":"page"},{"location":"#Example-usage:","page":"LDrawParser","title":"Example usage:","text":"","category":"section"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"using LDrawParser\npath = \"/path/to/ldraw_file.mpd\" # or .ldr\nmodel = parse_ldraw_file(path)\nmodel.models\nmodel.parts","category":"page"},{"location":"#Installation","page":"LDrawParser","title":"Installation","text":"","category":"section"},{"location":"#Module","page":"LDrawParser","title":"Module","text":"","category":"section"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"To install the module, run the following command in the Julia REPL:","category":"page"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"] add https://github.com/sisl/LDrawParser.jl.git","category":"page"},{"location":"#Parts-Library","page":"LDrawParser","title":"Parts Library","text":"","category":"section"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"It is recommended to download the LDraw parts library to get full use out of your models. Functionality still exists without the parts library, including parsing the build steps, but individual part geometry is recommended for most applications. The parts library can be downloaded from LDraw™ Parts Library. Place the unzipped library in your desired path. The default path assumed by LDrawParser is joinpath(homedir(), \"Documents/ldraw\"). It is recommended to download the complete library (~80 MB zipped, ~450 MB unzipped).","category":"page"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"If you did not place the parts library in the default path, you can change the path LDrawParser uses by the set_part_library_dir! command. For example, if you placed the parts library in the assets directory, you can run the following command in the Julia REPL:","category":"page"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"using LDrawParser\nset_part_library_dir!(\"assets/ldraw\")","category":"page"},{"location":"#Usage","page":"LDrawParser","title":"Usage","text":"","category":"section"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"A handful of models are provided in the assets directory. In this example, we are reading in the tractor model and populating the part geometry. We then use the change_coordinate_system! function to change the coordinate system from the LDraw system to the standard right-handed system and scale the model by 0.5.","category":"page"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"filename = joinpath(dirname(dirname(pathof(LDrawParser))), \"assets\", \"tractor.mpd\")\nmodel = parse_ldraw_file(filename)\n\n# Populate the part geometry\npopulate_part_geometry!(model)\n\n# Change the coordiante system from the LDraw system to the standard right-handed system and scale model by 0.5\nLDrawParser.change_coordinate_system!(model, ldraw_base_transform(), 0.5)","category":"page"},{"location":"#Functions","page":"LDrawParser","title":"Functions","text":"","category":"section"},{"location":"","page":"LDrawParser","title":"LDrawParser","text":"Modules = [LDrawParser]","category":"page"},{"location":"#LDrawParser.BuildingStep","page":"LDrawParser","title":"LDrawParser.BuildingStep","text":"BuildingStep\n\nRepresents a sequence of part placements that make up a building step in a LDraw file.\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.COMMAND_CODE","page":"LDrawParser","title":"LDrawParser.COMMAND_CODE","text":"COMMAND_CODE\n\nThe line type of a line is the first number on the line. The line types are:\n\nMETA          # 0 !<META command> <additional parameters>\nSUBFILEREF  # 1 <colour> x y z a b c d e f g h i <file>\nLINE          # 2 <colour> x1 y1 z1 x2 y2 z2\nTRIANGLE      # 3 <colour> x1 y1 z1 x2 y2 z2 x3 y3 z3\nQUADRILATERAL # 4 <colour> x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4\nOPTIONAL_LINE # 5 <colour> x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.DATModel","page":"LDrawParser","title":"LDrawParser.DATModel","text":"DATModel\n\nEncodes the raw geometry of a LDraw part stored in a .dat file. It is possible to avoid populating the geometry fields, which is useful for large models or models that use parts from the LDraw library.\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.FILE_TYPE","page":"LDrawParser","title":"LDrawParser.FILE_TYPE","text":"FILE_TYPE\n\nAll LDraw files carry the LDR (default), DAT or MPD extension.\n\nOfficial Parts Part | Subpart | Primitive | 8Primitive | 48Primitive | Shortcut Unofficial Parts UnofficialPart| UnofficialSubpart | UnofficialPrimitive | Unofficial8Primitive | Unofficial48Primitive | UnofficialShortcut\n\nThe file type is usually prefaced in one of the following ways     0 !LDRAWORG <type> (qualifier(s)) (update-tag)     0 LDRAWORG <type> update-tag     0 Official LCAD <type> update-tag     0 Unofficial <type>     0 Un-official <type>\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.META_COMMAND","page":"LDrawParser","title":"LDrawParser.META_COMMAND","text":"META_COMMAND\n\n0 !<META command> <additional parameters>\n\n! is used to positively identify this as a META command. (Note: A few   official meta commands do not start with a ! in order to preserve backwards compatibility, however, all new official META commands must start with a ! and it is strongly recommended that new unofficial meta-commands also start with a !)\n<META command> is any string in all caps\n<additional parameters> is any string. Note that if a META command does not   require any additional parameter, none should be given.\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.MPDModel","page":"LDrawParser","title":"LDrawParser.MPDModel","text":"MPDModel\n\nThe MPD model stores the information contained in a .mpd or .ldr file. This includes a submodel tree (stored implicitly in a dictionary that maps model_name to SubModelPlan) and a part list. The first model in MPDModel.models is the main model. All the following are submodels of that model and/or each other.\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.NgonElement","page":"LDrawParser","title":"LDrawParser.NgonElement","text":"NgonElement\n\nRepresents geometry from an LDraw file\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.OptionalLineElement","page":"LDrawParser","title":"LDrawParser.OptionalLineElement","text":"OptionalLineElement\n\nRepresents optional line geometry from an LDraw file\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.SubFileRef","page":"LDrawParser","title":"LDrawParser.SubFileRef","text":"SubFileRef\n\nRepresents a sub-file reference from an LDraw file. Encodes the placement of a part or submodel.\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.SubModelPlan","page":"LDrawParser","title":"LDrawParser.SubModelPlan","text":"SubModelPlan\n\nRepresents the sequence of building steps that make up a sub model in an LDraw file\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.change_coordinate_system!","page":"LDrawParser","title":"LDrawParser.change_coordinate_system!","text":"change_coordinate_system!(model::MPDModel, T=ldraw_base_transform(), scale=1.0; ignore_rotation_determinant=false)\n\nTransform the coordinate system of the entire model using transform T and scale scale.\n\n\n\n\n\n","category":"function"},{"location":"#LDrawParser.find_part_file","page":"LDrawParser","title":"LDrawParser.find_part_file","text":"find_part_file(name,library=get_part_library_dir())\n\nTry to find a file with name name, and return that file's path if found.\n\n\n\n\n\n","category":"function"},{"location":"#LDrawParser.get_color_dict-Tuple{}","page":"LDrawParser","title":"LDrawParser.get_color_dict","text":"get_color_dict()\n\nget dictionary mapping Integer code to color.\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.get_part_library_dir-Tuple{}","page":"LDrawParser","title":"LDrawParser.get_part_library_dir","text":"get_part_library_dir()\n\nReturn the path to the LDraw part library. This is the directory that contains the parts, primitives, and subparts directories.\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.ldraw_base_frame-Tuple{}","page":"LDrawParser","title":"LDrawParser.ldraw_base_frame","text":"ldraw_base_frame()\n\nReturns a rotation matrix that defines the base LDraw coordinate system. LDraw uses a right-handed co-ordinate system where -Y is \"up\"\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.load_color_dict!","page":"LDrawParser","title":"LDrawParser.load_color_dict!","text":"load_color_dict!(path=joinpath(get_part_library_dir(),\"LDConfig.ldr\")))\n\nLoad dictionary mapping Integer code to color.\n\n\n\n\n\n","category":"function"},{"location":"#LDrawParser.parse_ldraw_file-Tuple{Any}","page":"LDrawParser","title":"LDrawParser.parse_ldraw_file","text":"parse_ldraw_file(filename)\nparse_ldraw_file(filename; sneaky_parts::Set{String}=preprocess_ldraw_file(filename),\nignore_rotation_determinant::Bool=false)\n\nParse an LDraw file and return an MPDModel. Files can be .mpd or .ldr files.\n\nKeyword Arguments:\n\nsneaky_parts::Set{String}: A set of part names that are masquerading as submodels.\n\nOften not needed to include this argument, as it is automatically generated by preprocess_ldraw_file. (default: preprocess_ldraw_file(filename))\n\nignore_rotation_determinant::Bool: If true, ignore the determinant of the\n\nrotation matrix. Some parts have rotation matrices with negative determinants. This does not affect rendering, but can cause issues with other operations. (default: false)\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.populate_part_geometry!","page":"LDrawParser","title":"LDrawParser.populate_part_geometry!","text":"populate_part_geometry!(model,frontier=Set(collect(part_keys(model))))\n\nLoad all geometry into model.parts. Loading is recursive, so that geometry will be loaded through arbitrary levels of nested subparts until finally being stored in each atomic part that is referenced by the main model(s).\n\n\n\n\n\n","category":"function"},{"location":"#LDrawParser.preprocess_ldraw_file-Tuple{Any}","page":"LDrawParser","title":"LDrawParser.preprocess_ldraw_file","text":"preprocess_ldraw_file(io)\n\nReturn a set of part names that are masquerading as submodels.\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.read_line!-Tuple{Any, Any, Any}","page":"LDrawParser","title":"LDrawParser.read_line!","text":"read_line!\n\nFor reading lines of type LINE\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.read_meta_line!","page":"LDrawParser","title":"LDrawParser.read_meta_line!","text":"read_meta_line(model,state,line)\n\nModifies the model and parser_state based on a META command. For example, the FILE meta command indicates the beginning of a new file, so this creates a new active model into which subsequent building steps will be placed. The STEP meta command indicates the end of the current step, which prompts the parser to close the current build step and begin a new one.\n\n\n\n\n\n","category":"function"},{"location":"#LDrawParser.read_optional_line!-Tuple{Any, Any, Any}","page":"LDrawParser","title":"LDrawParser.read_optional_line!","text":"read_optional_line!\n\nFor reading lines of type OPTIONAL_LINE\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.read_quadrilateral!-Tuple{Any, Any, Any}","page":"LDrawParser","title":"LDrawParser.read_quadrilateral!","text":"read_quadrilateral!\n\nFor reading lines of type QUADRILATERAL\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.read_sub_file_ref!-Tuple{Any, Any, Any}","page":"LDrawParser","title":"LDrawParser.read_sub_file_ref!","text":"read_sub_file_ref\n\nReceives a SUBFILEREF line (with the leading SUBFILEREF id stripped)\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.read_triangle!-Tuple{Any, Any, Any}","page":"LDrawParser","title":"LDrawParser.read_triangle!","text":"read_triangle!\n\nFor reading lines of type TRIANGLE\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.set_part_library_dir!-Tuple{Any}","page":"LDrawParser","title":"LDrawParser.set_part_library_dir!","text":"set_part_library_dir!(path)\n\nSet the path to the LDraw part library. This is the directory that contains the parts, primitives, and subparts directories.\n\n\n\n\n\n","category":"method"}]
}
